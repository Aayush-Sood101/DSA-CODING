#include<iostream>
using namespace std;
class Node{
public:
    int val;
    Node* next;
    Node(int val){
        this->val=val;
        this->next=NULL;
    }
};
Node* reverse(Node* head){
    Node* Curr = head;
    Node* Prev = NULL;
    Node* Next = NULL;
    while(Curr!=NULL){
        Next = Curr->next;
        Curr->next = Prev;
        Prev = Curr;
        Curr = Next;
    }
    return Prev;
}
    Node* reverseBetween(Node* head, int l, int r) {
    //base case
    if(l==r)
    return head;
    //Breaking it into three lists
    Node *a = NULL,*b = NULL, *c = NULL ,*d=NULL;
    int n = 1;
    Node* temp = head;
    while(temp!=NULL){
        if(n==l-1)
        a = temp;
        if(n==l)
        b = temp;
        if(n==r)
        c = temp;
        if(n==r+1)
        d = temp;
        n++;
        temp = temp->next;
    }
    if(a!=NULL)
    a->next = NULL;
    c->next = NULL;
    Node* newHead = reverse(b);
    if(a!=NULL)
    a->next = newHead;
    b->next = d;
    if(a!=NULL)
    return head;
    else
    return newHead;
}
    Node* reverseKGroup(Node* head, int k) {
    if(head==NULL || head->next == NULL)
    return head;
    Node* temp = head;
    while(temp->next!=NULL){
        Node* newHead = reverseBetween(temp , 2 , 3);
        return head;
        for(int i = 1;i<=k && temp->next!=NULL;i++)
        temp = temp->next;
    }
    return head;
}
int main(){
    Node* a = new Node(1);
    Node* b = new Node(2);
    Node* c = new Node(3);
    Node* d = new Node(4);
    Node* e = new Node(5);
    a->next = b;
    b->next  = c;
    c->next = d;
    d->next = e;
    reverseKGroup(a,2);
}